import Mathlib.Topology.Sheaves.Sheaf
import Mathlib.Topology.Sheaves.stalks

open TopCat TopologicalSpace Opposite CategoryTheory AlgebraicGeometry

variable {X : TopCat} (‚Ñ± : Presheaf (Type _) X)

namespace TopCat.Presheaf

/--
The espace √©tal√© of a presheaf `‚Ñ±` on `X` is defined as the collection of all
ordered pairs `‚ü®x, y‚ü©` such that `x` is a point in `X` and `y` belongs to `‚Ñ±.stalk x`,
which is a topological space when equipped with its canonical topology.
-/
def esEt : TopCat where
  Œ± := Œ£ (x : X), ‚Ñ±.stalk x
  str := generateFrom
    { V | ‚àÉ (U : (Opens X)·µí·µñ) (s : ‚Ñ±.obj U),
      V = { z : Œ£ x, ‚Ñ±.stalk x | ‚àÉ (m : z.1 ‚àà U.unop), z.2 = ‚Ñ±.germ ‚ü®z.1, m‚ü© s } }

/--
Given an open subset `U` of `X` and a section `s` of `‚Ñ±` over `U`, `esEtMkBO s`
is the basic open subset of `‚Ñ±.esEt` induced by `U` and `s`.
-/
def esEtMkBO {U : (Opens X)·µí·µñ} (s : ‚Ñ±.obj U) : Opens (‚Ñ±.esEt) where
  carrier := { z | ‚àÉ (m : z.1 ‚àà U.unop), z.2 = ‚Ñ±.germ ‚ü®z.1, m‚ü© s }
  is_open' := isOpen_generateFrom_of_mem ‚ü®U, _, rfl‚ü©

/--
Let `U` be an open subset of `X` and let `s` be a section of `‚Ñ±` over `U`. For any
point `z` in `esEt ‚Ñ±`, `z` belongs to `‚Ñ±.esEtMkBO s` if and only if `z.2` is the
germ of `s` at `z.1`.
-/
lemma mem_esEtMkBO_iff {U : (Opens X)·µí·µñ} (s : ‚Ñ±.obj U) (z) :
    z ‚àà ‚Ñ±.esEtMkBO s ‚Üî ‚àÉ (m : z.1 ‚àà U.unop), z.2 = ‚Ñ±.germ ‚ü®z.1, m‚ü© s := by
  delta esEtMkBO
  rfl

/--
Let `U` be an open subset of `X` and let `s` be a section of `‚Ñ±` over `U`. For any
point `z` in `esEt ‚Ñ±`, if `z` belongs to `‚Ñ±.esEtMkBO s`, then `z.1` is in `U`.
-/
lemma fst_mem_of_mem_esEtMkBO {U : (Opens X)·µí·µñ} (s : ‚Ñ±.obj U) {z}
  (hz : z ‚àà ‚Ñ±.esEtMkBO s) : z.1 ‚àà U.unop := hz.choose

/--
Let `U` be an open subset of `X` and let `s` be a section of `‚Ñ±` over `U`. For any
point `z` in `esEt ‚Ñ±`, if `z` belongs to `‚Ñ±.esEtMkBO s`, then `z.2` is the germ of
`s` at `z.1`.
-/
lemma snd_eq_of_mem_esEtMkBO {U : (Opens X)·µí·µñ} (s : ‚Ñ±.obj U) {z}
    (hz : z ‚àà ‚Ñ±.esEtMkBO s) :
    z.2 = ‚Ñ±.germ ‚ü®z.1, ‚Ñ±.fst_mem_of_mem_esEtMkBO _ hz‚ü© s :=
  hz.choose_spec

/--
Let `M` be a morphism between two presheaves `ùí¨` and `‚Ñõ` on `X`, then `M` induces a continuous
map from `esEt ùí¨` to `esEt ‚Ñõ` such that for any `s : esEt ùí¨`, `s` is sent to the ordered pair
`‚ü®s.1, ((TopCat.Presheaf.stalkFunctor (Type _) s.1).map M) s.2‚ü©`.
-/
noncomputable def esEtFunctorMap {ùí¨ ‚Ñõ : Presheaf (Type _) X} (M : ùí¨ ‚ü∂ ‚Ñõ) :
  (esEt ùí¨) ‚ü∂ (esEt ‚Ñõ) where
    toFun := Œª s ‚Ü¶ ‚ü®s.1, ((TopCat.Presheaf.stalkFunctor (Type _) s.1).map M) s.2‚ü©
    continuous_toFun := by
      { refine continuous_generateFrom ?_
        intro V hV
        rcases hV with ‚ü®U, s, rfl‚ü©
        rw [isOpen_iff_mem_nhds]
        rintro ‚ü®p, g‚ü© (‚ü®mp, hpg‚ü© : ‚àÉ _, _)
        rw [mem_nhds_iff]
        rcases (ùí¨.germ_exist p g) with ‚ü®U', ‚ü®hp, s', rfl‚ü©‚ü©
        let r := TopCat.Presheaf.restrictOpen s' (U.unop ‚äì U') (inf_le_right : U.unop ‚äì U' ‚â§ U')
        let r' := M.app (op (U.unop ‚äì U')) r
        have h1 : germ ‚Ñõ (U := U.unop ‚äì U') ‚ü®p, ‚ü®mp, hp‚ü©‚ü© r' = germ ‚Ñõ ‚ü®p, mp‚ü© s
        . rw [‚Üêhpg]
          change _ = (stalkFunctor (Type _) p).map M (germ ùí¨ ‚ü®p, hp‚ü© s')
          change _ = (_ ‚â´ (stalkFunctor _ _).map M) _
          rw [stalkFunctor_map_germ (U := U') ‚ü®p, _‚ü©]
          dsimp
          rw [show M.app (op <| U.unop ‚äì U') (s' |_ (U.unop ‚äì U')) =
            ‚Ñõ.map (homOfLE <| by restrict_tac).op (M.app (op U') s') by
              change _ = (M.app (op U') ‚â´ ‚Ñõ.map (homOfLE _).op) s'
              rw [‚ÜêM.naturality]
              rfl]
          change (‚Ñõ.map _ ‚â´ germ _ _) _ = _
          rw [germ_res]
        obtain ‚ü®W, pW, i1, i2, (h2 : ‚Ñõ.map i1.op _ = ‚Ñõ.map i2.op _)‚ü© :=
          germ_eq (C := Type _) (h := h1)
        have le1 := leOfHom i1
        have le2 := leOfHom i2
        refine ‚ü®ùí¨.esEtMkBO (r |_ W), ?_, (ùí¨.esEtMkBO (r |_ W)).2, ?_‚ü©
        . intro x (hx : x ‚àà esEtMkBO _ _)
          change ‚àÉ _ , _; dsimp
          refine ‚ü®le2 (ùí¨.fst_mem_of_mem_esEtMkBO _ hx), ?_‚ü©
          rw [ùí¨.snd_eq_of_mem_esEtMkBO _ hx]
          change (_ ‚â´ (stalkFunctor _ _).map M) _ = _
          rw [stalkFunctor_map_germ (U := W) ‚ü®x.1, _‚ü©]
          have h3 : (‚Ñõ.map i2.op s) = M.app (op W) (ùí¨.map i1.op r)
          . change _ = (ùí¨.map i1.op ‚â´ M.app _) r
            rw [M.naturality, ‚Üêh2]
            rfl
          simp at *
          erw [‚Üêh3]
          refine' germ_res_apply ‚Ñõ i2 ‚ü®x.fst, _‚ü© s
        . refine ‚ü®pW, ?_‚ü©
          rw [restrict_restrict (e‚ÇÅ := by restrict_tac) (e‚ÇÇ := by restrict_tac)]
          change ùí¨.germ _ _ = _
          change _ = (ùí¨.map (i1 ‚â´ homOfLE (inf_le_right : U.unop ‚äì U' ‚â§ U')).op ‚â´ ùí¨.germ ‚ü®p, pW‚ü©) s'
          rw [ùí¨.germ_res] }

/--
There is a functor from `(Presheaf (Type _) X)` to `TopCat` that sends any presheaf `ùí≥`
on `X` to `esEt ùí≥` and sends any morphism of presheaves `M` to `esEtFunctorMap M`.
-/
noncomputable def esEtFunctor : CategoryTheory.Functor (Presheaf (Type _) X) TopCat where
  obj := Œª ùí≥ ‚Ü¶ (esEt ùí≥)
  map := Œª M ‚Ü¶ (esEtFunctorMap M)
  map_id := by
    { intro ùí≥
      ext s
      simp
      rw [esEtFunctorMap]
      simp
      rfl }
  map_comp := by
    { intro ùí≥ ùí¥ ùíµ M N
      ext s
      change ‚ü®s.1, ((TopCat.Presheaf.stalkFunctor (Type _) s.1).map (M ‚â´ N)) s.2‚ü© =
        (esEtFunctorMap N) ‚ü®s.1, ((TopCat.Presheaf.stalkFunctor (Type _) s.1).map M) s.2‚ü©
      aesop_cat }

/--
There is a canonical projection map from `esEt ‚Ñ±` to `X` which is continuous.
For any `z` in `esEt ‚Ñ±`, `z` is sent to `z.1`.
-/
def esEtœÄ :
  ContinuousMap (esEt ‚Ñ±) X where
    toFun := Œª z ‚Ü¶ z.1
    continuous_toFun := {
      isOpen_preimage := by
        intro U hU
        rw [isOpen_iff_mem_nhds]
        rintro ‚ü®p, g‚ü© (hp1 : p ‚àà U)
        rw [mem_nhds_iff]
        rcases (‚Ñ±.germ_exist p g) with ‚ü®U', ‚ü®hp2, s, rfl‚ü©‚ü©
        refine ‚ü®{z | ‚àÉ (m : z.1 ‚àà U ‚äì U'), z.2 = ‚Ñ±.germ ‚ü®z.1, (inf_le_right : U ‚äì U' ‚â§ U') m‚ü© s },
          ?_, isOpen_generateFrom_of_mem ‚ü®op <| ‚ü®U, hU‚ü© ‚äì U', ‚Ñ±.map (homOfLE <| inf_le_right).op s,
          ?_‚ü©, ‚ü®‚ü®hp1, hp2‚ü©, rfl‚ü©‚ü©
        . rintro _ ‚ü®m, _‚ü©
          exact inf_le_left (a := U) m
        . ext1 ‚ü®x, g'‚ü©
          refine ‚ü®?_, ?_‚ü©
          . rintro ‚ü®(m : x ‚àà _), (h : g' = _)‚ü©
            refine ‚ü®m, show _ = (‚Ñ±.map _ ‚â´ _) s from ?_‚ü©
            erw [germ_res, h]
          . rintro ‚ü®(m : x ‚àà U ‚äì U'), (h : g' = _)‚ü©
            refine ‚ü®m, ?_‚ü©
            rw [h]
            exact germ_ext (C := Type _) (W := ‚ü®U, hU‚ü© ‚äì U') _ m
              (iWU := ùüô _) (iWV := homOfLE <| inf_le_right) <| by aesop_cat }

/--
For any open subset `U` of `X` and section `s` of the presheaf `‚Ñ±` over `U`,
`esEtGermMap ‚Ñ± U s` sends `x : U` to `‚ü®x, ‚Ñ±.germ x s‚ü©`.
-/
noncomputable def esEtGermMap (U : Opens X) (s : ‚Ñ±.obj (op U)) :
  U ‚Üí (esEt ‚Ñ±) := Œª x ‚Ü¶ ‚ü®x, ‚Ñ±.germ x s‚ü©

/--
For any open subset `U` of `X` and section `s` of the presheaf `‚Ñ±` over `U`,
`esEtGermMap ‚Ñ± U s` is a continuous map.
-/
lemma continuous_of_esEtGermMap (U : Opens X) (s : ‚Ñ±.obj (op U)) :
  Continuous (esEtGermMap ‚Ñ± U s) := by
{ refine continuous_generateFrom ?_
  . intro V hV
    change ‚àÉ U' s', V = { z | ‚àÉ m, z.snd = germ ‚Ñ± ‚ü®z.1, _‚ü© s' } at hV
    rcases hV with ‚ü®U', s', hs'‚ü©
    rw [isOpen_iff_mem_nhds, hs']
    rintro ‚ü®p, hp‚ü© hp'
    simp_rw [esEtGermMap] at *
    rcases (germ_eq ‚Ñ± p hp hp'.1 s s' hp'.2) with ‚ü®O, hpO, iU, iU', hss'‚ü©
    rw [mem_nhds_iff]
    use { x | ‚Üëx ‚àà U ‚äì O }
    constructor
    . intro x hx
      exact ‚ü®SetLike.coe_mem (iU' ‚ü®‚Üëx, (inf_le_right : U ‚äì O ‚â§ O) hx‚ü©),
        germ_ext ‚Ñ± O ((inf_le_right : U ‚äì O ‚â§ O) hx) iU iU' hss'‚ü©
    . constructor
      constructor
      refine ‚ü®?_, rfl‚ü©
      exact Opens.isOpen (U ‚äì O)
      exact Set.mem_sep hp hpO }

/--
Let `U` be an open subset of `X` and let `s` be a section of `‚Ñ±` over `U`. Then
the composition of `esEtœÄ ‚Ñ±` and `esEtGermMap ‚Ñ± U s` is the inclusion map from
`U` to `X`.
-/
lemma is_inclusion_of_esEt_esEtGermMap_Composition (U : Opens X) (s : ‚Ñ±.obj (op U)) :
  ‚àÄ (u : U), (esEtœÄ ‚Ñ±) ((esEtGermMap ‚Ñ± U s) u) = u := by
{ intro u
  rfl }

/--
Let `U` be an open subset of `X`. A map `s : C(U, esEt ‚Ñ±)` is a continuous section of
`esEt ‚Ñ±` over `U` if the composition of `esEtœÄ ‚Ñ±` and `s` is the inclusion map from `U`
to `X`.
-/
def is_esEtContSection {U : Opens X} (s : C(U, esEt ‚Ñ±)) :=
  ‚àÄ (u : U), (esEtœÄ ‚Ñ±) (s u) = u


def esEtContSectionSheaf : TopCat.Sheaf (Type _) X where
  val := {
    obj := Œª U ‚Ü¶ { s : C(U.unop, esEt ‚Ñ±) | ‚àÄ (u : U.unop), (esEtœÄ ‚Ñ±) (s u) = u }
    map := fun {O1 O2} i shs ‚Ü¶ ‚ü®‚ü®shs.1 ‚àò i.unop, Continuous.comp (ContinuousMap.continuous shs.1)
      (continuous_inclusion (LE.le.subset (leOfHom i.unop)))‚ü©, by
        simp only [Subtype.forall, Set.mem_setOf_eq, ContinuousMap.coe_mk, Function.comp_apply]
        intro a ha
        aesop_cat‚ü©
    map_id := by
      { sorry--aesop_cat
        }
    map_comp := by
      { sorry--aesop_cat
        } }
  cond := by
    { change TopCat.Presheaf.IsSheaf _
      erw [TopCat.Presheaf.isSheaf_iff_isSheafUniqueGluing_types]
      intro I U sf IC
      refine' ‚ü®‚ü®‚ü®Œª x ‚Ü¶ by
        simp only [unop_op, Opens.mem_iSup] at x
        exact (sf x.2.choose).1 ‚ü®x.1, x.2.choose_spec‚ü©, sorry‚ü©, sorry‚ü©, sorry‚ü© }

end TopCat.Presheaf
